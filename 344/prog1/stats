#!/bin/bash
#
# Program 1 -- CS 344, Fall 2016
# Tim Thomas


TMP_stdin=temp$$_stdin
TMP_transpose=temp$$_transpose
TMP_median=temp$$_median

trap "rm -f temp$$*; exit 1" INT HUP TERM

usage='Usage: stats {-rows|-cols} [file]'


# Function to calculate the average (mean) of a row of values
#     $1 is a row of whitespace-separated values
function calc_average {
    sum=0
    cnt=0

    # Calculate sum of row or col and # of values in row or col
    for val in $1; do
        sum=`expr $sum + $val`
        cnt=`expr $cnt + 1`
    done

    # calculate mean (sum/cnt)
    if [ $((cnt % 2)) -eq 0 ]; then                 # divisor is even
        if [ $((sum % cnt)) -ge $((cnt/2)) ]; then  # round up 
            mean=`expr $sum / $cnt + 1`
        else                                        # round down
            mean=`expr $sum / $cnt`
        fi
    else                                            # divisor is odd
        if [ $((sum % cnt)) -gt $((cnt/2)) ]; then  # round up 
            mean=`expr $sum / $cnt + 1`
        else                                        # round down
            mean=`expr $sum / $cnt`
        fi
    fi

    echo $mean
}


# Function to calculate the median of a row of values
#     $1 is a row of whitespace-separated values
function calc_median {
    cnt=0

    # determine how many values we have
    for val in $1; do
        cnt=`expr $cnt + 1`
        echo $val >> $TMP_median
    done

    # find location of middle value (bias towards greater value if cnt is even)
    middle=`expr $cnt / 2 + 1`

    # calculate median: 
    #    list values | sort by number | list first $middle rows | list last row
    median=`cat $TMP_median | sort -n | head -${middle} | tail -1`

    rm -f $TMP_median
    echo $median
}


# Function to convert rows of values to columns
# Transposed data saved to file $TMP_transpose
#     $1 contains input to be transposed
function transpose {

    # Get number of columns
    numCols=0
    read line <$1
    for val in ${line}; do
        numCols=`expr $numCols + 1`
    done

    # transpose data 
    i=1
    while [[ $i -le $numCols ]] ; do 
        cut -f $i $1 | tr '\n' '\t' >> $TMP_transpose
        echo "" >> $TMP_transpose
        i=`expr $i + 1` 
    done
}


#  
#  Check Usage
# 

#  check that number of args is 2 or 1
if [[ $# -eq 2 ]]; then   

    #   check that optional second arg is a file and is readable
    if [ ! -r $2 ]; then
        echo "$2 is not a readable file." >&2
        exit 1
    fi

    #   check that input file has length greater than zero 
    if [ ! -s $2 ]; then
        echo "$2 is empty." >&2
        exit 1
    fi

    input=$2

# no input file provided, so check process from stdin
elif [[ $# -eq 1 ]]; then
    cat > $TMP_stdin
    input=$TMP_stdin

# error, incorrect # of command line args
else
    echo $usage >&2
    exit 1
fi


#
#  Loop through rows/columns and perform calculations
#

#   make sure first arg starts with 'r' or 'c'
if [[ $1 == -r* ]]; then      # Processing rows
    echo Average Median

    # Calculate/print average and median for each row
    while read line; do

        avg=$(calc_average "${line}")
        median=$(calc_median "${line}")

        echo -e "$avg       $median"

    done <${input}


elif [[ $1 == -c* ]]; then   # processing columns

    # It's easier to calculate by row using the functions we already have.  
    # So modify input so that rows/cols are transposed.
    transpose $input
    input=$TMP_transpose

    # Loop through each column (now as rows); calc and print averages
    echo "Averages:"
    while read line; do
        avg=$(calc_average "${line}")
        echo -ne "$avg      "
    done <$input

    # Loop through each column (now as rows); calc and print medians
    echo -e "\nMedians:"
    while read line; do

        median=$(calc_median "${line}")
        echo -ne $median'      '

    done <${input}

# error, first argument must start with -r or -c
else
    echo $usage >&2
    exit 1
fi

echo ""   # need a newline at very end

# cleanup temp files
rm -f temp$$*
